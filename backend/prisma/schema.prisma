generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model articles {
  id         String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title      String     @db.VarChar(50)
  perex      String     @db.VarChar(300)
  content    String     @db.VarChar
  image_id   String     @db.Uuid
  created_at DateTime   @db.Timestamp(6)
  updated_at DateTime   @db.Timestamp(6)
  user_id    String?    @db.Uuid
  users      users?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  comments   comments[]
}

model users {
  id       String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username String     @unique(map: "username_unique") @db.VarChar(30)
  password String     @db.VarChar
  articles articles[]
  comments comments[]
  votes    votes[]
}

model comments {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String?   @db.Uuid
  article_id String?   @db.Uuid
  content    String    @db.VarChar(600)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  articles   articles? @relation(fields: [article_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  votes      votes[]
}

model votes {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  comment_id String   @db.Uuid
  user_id    String   @db.Uuid
  type       String   @db.VarChar(7)
  comments   comments @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
